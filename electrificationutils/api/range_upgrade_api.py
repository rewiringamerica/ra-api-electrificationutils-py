# coding: utf-8

"""
    smallmodelsapi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt
from typing import List
from typing_extensions import Annotated
from electrificationutils.models.energy_tradeoff import EnergyTradeoff
from electrificationutils.models.range_fuel_type import RangeFuelType

from electrificationutils.api_client import ApiClient, RequestSerialized
from electrificationutils.api_response import ApiResponse
from electrificationutils.rest import RESTResponseType


class RangeUpgradeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def range_upgrade_range_upgrade_v1_get(
        self,
        current_fuel: Annotated[RangeFuelType, Field(description="The fuel used by the current range.")],
        occupants: Annotated[StrictInt, Field(description="The number of occupants in the household.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[EnergyTradeoff]:
        """Range Upgrade

        Analyze the potential energy usage effects of a range upgrade.  We assume that the caller is contemplating replacing a natural gas or propane-burning range with an electric one. Based on the fuel their current range uses and the number of occupants in their household, we estimate how the use of electricity, natural gas, and propane will be likely to change under three different scenarios.  The scenarios are low, medium, and high use, which correspond to using a range 80% as much as a typical household, exactly as much as a typical household, and 120% as much as a typical household.  Parameters ---------- current_fuel     The currently used fuel. occupants     the number of occupants in the household.  Returns -------     Changes in energy use across a number of fuels.

        :param current_fuel: The fuel used by the current range. (required)
        :type current_fuel: RangeFuelType
        :param occupants: The number of occupants in the household. (required)
        :type occupants: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._range_upgrade_range_upgrade_v1_get_serialize(
            current_fuel=current_fuel,
            occupants=occupants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[EnergyTradeoff]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def range_upgrade_range_upgrade_v1_get_with_http_info(
        self,
        current_fuel: Annotated[RangeFuelType, Field(description="The fuel used by the current range.")],
        occupants: Annotated[StrictInt, Field(description="The number of occupants in the household.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[EnergyTradeoff]]:
        """Range Upgrade

        Analyze the potential energy usage effects of a range upgrade.  We assume that the caller is contemplating replacing a natural gas or propane-burning range with an electric one. Based on the fuel their current range uses and the number of occupants in their household, we estimate how the use of electricity, natural gas, and propane will be likely to change under three different scenarios.  The scenarios are low, medium, and high use, which correspond to using a range 80% as much as a typical household, exactly as much as a typical household, and 120% as much as a typical household.  Parameters ---------- current_fuel     The currently used fuel. occupants     the number of occupants in the household.  Returns -------     Changes in energy use across a number of fuels.

        :param current_fuel: The fuel used by the current range. (required)
        :type current_fuel: RangeFuelType
        :param occupants: The number of occupants in the household. (required)
        :type occupants: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._range_upgrade_range_upgrade_v1_get_serialize(
            current_fuel=current_fuel,
            occupants=occupants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[EnergyTradeoff]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def range_upgrade_range_upgrade_v1_get_without_preload_content(
        self,
        current_fuel: Annotated[RangeFuelType, Field(description="The fuel used by the current range.")],
        occupants: Annotated[StrictInt, Field(description="The number of occupants in the household.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Range Upgrade

        Analyze the potential energy usage effects of a range upgrade.  We assume that the caller is contemplating replacing a natural gas or propane-burning range with an electric one. Based on the fuel their current range uses and the number of occupants in their household, we estimate how the use of electricity, natural gas, and propane will be likely to change under three different scenarios.  The scenarios are low, medium, and high use, which correspond to using a range 80% as much as a typical household, exactly as much as a typical household, and 120% as much as a typical household.  Parameters ---------- current_fuel     The currently used fuel. occupants     the number of occupants in the household.  Returns -------     Changes in energy use across a number of fuels.

        :param current_fuel: The fuel used by the current range. (required)
        :type current_fuel: RangeFuelType
        :param occupants: The number of occupants in the household. (required)
        :type occupants: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._range_upgrade_range_upgrade_v1_get_serialize(
            current_fuel=current_fuel,
            occupants=occupants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[EnergyTradeoff]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _range_upgrade_range_upgrade_v1_get_serialize(
        self,
        current_fuel,
        occupants,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if current_fuel is not None:
            
            _query_params.append(('current_fuel', current_fuel.value))
            
        if occupants is not None:
            
            _query_params.append(('occupants', occupants))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/range_upgrade/v1/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


