# coding: utf-8

"""
    smallmodelsapi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictFloat, StrictInt, StrictStr
from typing import Any, Optional, Union
from electrificationutils.models.hvac_efficiency_electric_detailed import HvacEfficiencyElectricDetailed
from electrificationutils.models.hvac_efficiency_fossil_fuels import HvacEfficiencyFossilFuels
from electrificationutils.models.hvac_update_results import HvacUpdateResults

from electrificationutils.api_client import ApiClient, RequestSerialized
from electrificationutils.api_response import ApiResponse
from electrificationutils.rest import RESTResponseType


class GGRFHVACUpdateApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get(
        self,
        electric_efficiency: HvacEfficiencyElectricDetailed,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> float:
        """Ggrf Hvac Upgrade Btu Per Watt Hour

        Look up the efficiency, in BTU/Wh for a given standard.  Parameters ---------- electric_efficiency     One of the standards-based measures of HVAC electrical efficiency.  Returns -------     The efficiency in BTU/wh for that standard.

        :param electric_efficiency: (required)
        :type electric_efficiency: HvacEfficiencyElectricDetailed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get_serialize(
            electric_efficiency=electric_efficiency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get_with_http_info(
        self,
        electric_efficiency: HvacEfficiencyElectricDetailed,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[float]:
        """Ggrf Hvac Upgrade Btu Per Watt Hour

        Look up the efficiency, in BTU/Wh for a given standard.  Parameters ---------- electric_efficiency     One of the standards-based measures of HVAC electrical efficiency.  Returns -------     The efficiency in BTU/wh for that standard.

        :param electric_efficiency: (required)
        :type electric_efficiency: HvacEfficiencyElectricDetailed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get_serialize(
            electric_efficiency=electric_efficiency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get_without_preload_content(
        self,
        electric_efficiency: HvacEfficiencyElectricDetailed,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ggrf Hvac Upgrade Btu Per Watt Hour

        Look up the efficiency, in BTU/Wh for a given standard.  Parameters ---------- electric_efficiency     One of the standards-based measures of HVAC electrical efficiency.  Returns -------     The efficiency in BTU/wh for that standard.

        :param electric_efficiency: (required)
        :type electric_efficiency: HvacEfficiencyElectricDetailed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get_serialize(
            electric_efficiency=electric_efficiency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ggrf_hvac_upgrade_btu_per_watt_hour_ggrf_hvac_upgrade_btu_per_watt_hour_v1_get_serialize(
        self,
        electric_efficiency,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if electric_efficiency is not None:
            
            _query_params.append(('electric_efficiency', electric_efficiency.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ggrf/hvac_upgrade/btu_per_watt_hour/v1/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get(
        self,
        location_zip_code: StrictStr,
        new_unit_efficiency_percent: Union[StrictFloat, StrictInt],
        existing_efficiency_btu_per_watt_hour: Union[StrictFloat, StrictInt],
        annual_hvac_usage_kwh: Union[StrictFloat, StrictInt],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Ggrf Hvac Upgrade Electric To Electric

        Calculate emissions savings for an HVAC update from and older electric technology to a newer one.  Replicate the calculation on the 'B1. HVAC update' tab of the 'Priority_Project_2_Net-Zero Building GGRF Calculator 10.18.24.xlsx' spreadsheet.  Parameters ---------- location_zip_code     The zip code where the upgrade is taking place. This is used to determine     how power is supplied and the emissions it generates. new_unit_efficiency_percent     The percent efficiency of the new electric HVAC unit. Value should be between     0 and 100 (not 0.0 and 1.0). existing_efficiency_btu_per_watt_hour     The efficiency of the existing unit that is being replaced. annual_hvac_usage_kwh     The annual usage of electricity by the previously existing electric HVAC equipment.  Returns -------     The old and new annual emissions of CO2e and their difference.

        :param location_zip_code: (required)
        :type location_zip_code: str
        :param new_unit_efficiency_percent: (required)
        :type new_unit_efficiency_percent: float
        :param existing_efficiency_btu_per_watt_hour: (required)
        :type existing_efficiency_btu_per_watt_hour: float
        :param annual_hvac_usage_kwh: (required)
        :type annual_hvac_usage_kwh: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get_serialize(
            location_zip_code=location_zip_code,
            new_unit_efficiency_percent=new_unit_efficiency_percent,
            existing_efficiency_btu_per_watt_hour=existing_efficiency_btu_per_watt_hour,
            annual_hvac_usage_kwh=annual_hvac_usage_kwh,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get_with_http_info(
        self,
        location_zip_code: StrictStr,
        new_unit_efficiency_percent: Union[StrictFloat, StrictInt],
        existing_efficiency_btu_per_watt_hour: Union[StrictFloat, StrictInt],
        annual_hvac_usage_kwh: Union[StrictFloat, StrictInt],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Ggrf Hvac Upgrade Electric To Electric

        Calculate emissions savings for an HVAC update from and older electric technology to a newer one.  Replicate the calculation on the 'B1. HVAC update' tab of the 'Priority_Project_2_Net-Zero Building GGRF Calculator 10.18.24.xlsx' spreadsheet.  Parameters ---------- location_zip_code     The zip code where the upgrade is taking place. This is used to determine     how power is supplied and the emissions it generates. new_unit_efficiency_percent     The percent efficiency of the new electric HVAC unit. Value should be between     0 and 100 (not 0.0 and 1.0). existing_efficiency_btu_per_watt_hour     The efficiency of the existing unit that is being replaced. annual_hvac_usage_kwh     The annual usage of electricity by the previously existing electric HVAC equipment.  Returns -------     The old and new annual emissions of CO2e and their difference.

        :param location_zip_code: (required)
        :type location_zip_code: str
        :param new_unit_efficiency_percent: (required)
        :type new_unit_efficiency_percent: float
        :param existing_efficiency_btu_per_watt_hour: (required)
        :type existing_efficiency_btu_per_watt_hour: float
        :param annual_hvac_usage_kwh: (required)
        :type annual_hvac_usage_kwh: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get_serialize(
            location_zip_code=location_zip_code,
            new_unit_efficiency_percent=new_unit_efficiency_percent,
            existing_efficiency_btu_per_watt_hour=existing_efficiency_btu_per_watt_hour,
            annual_hvac_usage_kwh=annual_hvac_usage_kwh,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get_without_preload_content(
        self,
        location_zip_code: StrictStr,
        new_unit_efficiency_percent: Union[StrictFloat, StrictInt],
        existing_efficiency_btu_per_watt_hour: Union[StrictFloat, StrictInt],
        annual_hvac_usage_kwh: Union[StrictFloat, StrictInt],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ggrf Hvac Upgrade Electric To Electric

        Calculate emissions savings for an HVAC update from and older electric technology to a newer one.  Replicate the calculation on the 'B1. HVAC update' tab of the 'Priority_Project_2_Net-Zero Building GGRF Calculator 10.18.24.xlsx' spreadsheet.  Parameters ---------- location_zip_code     The zip code where the upgrade is taking place. This is used to determine     how power is supplied and the emissions it generates. new_unit_efficiency_percent     The percent efficiency of the new electric HVAC unit. Value should be between     0 and 100 (not 0.0 and 1.0). existing_efficiency_btu_per_watt_hour     The efficiency of the existing unit that is being replaced. annual_hvac_usage_kwh     The annual usage of electricity by the previously existing electric HVAC equipment.  Returns -------     The old and new annual emissions of CO2e and their difference.

        :param location_zip_code: (required)
        :type location_zip_code: str
        :param new_unit_efficiency_percent: (required)
        :type new_unit_efficiency_percent: float
        :param existing_efficiency_btu_per_watt_hour: (required)
        :type existing_efficiency_btu_per_watt_hour: float
        :param annual_hvac_usage_kwh: (required)
        :type annual_hvac_usage_kwh: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get_serialize(
            location_zip_code=location_zip_code,
            new_unit_efficiency_percent=new_unit_efficiency_percent,
            existing_efficiency_btu_per_watt_hour=existing_efficiency_btu_per_watt_hour,
            annual_hvac_usage_kwh=annual_hvac_usage_kwh,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ggrf_hvac_upgrade_electric_to_electric_ggrf_hvac_upgrade_electric_to_electric_v1_get_serialize(
        self,
        location_zip_code,
        new_unit_efficiency_percent,
        existing_efficiency_btu_per_watt_hour,
        annual_hvac_usage_kwh,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_zip_code is not None:
            
            _query_params.append(('location_zip_code', location_zip_code))
            
        if new_unit_efficiency_percent is not None:
            
            _query_params.append(('new_unit_efficiency_percent', new_unit_efficiency_percent))
            
        if existing_efficiency_btu_per_watt_hour is not None:
            
            _query_params.append(('existing_efficiency_btu_per_watt_hour', existing_efficiency_btu_per_watt_hour))
            
        if annual_hvac_usage_kwh is not None:
            
            _query_params.append(('annual_hvac_usage_kwh', annual_hvac_usage_kwh))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ggrf/hvac_upgrade/electric-to-electric/v1/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get(
        self,
        location_zip_code: StrictStr,
        existing_unit_efficiency_standard: HvacEfficiencyFossilFuels,
        new_unit_efficiency_percent: Union[StrictFloat, StrictInt],
        existing_efficiency_btu_per_watt_hour: Union[StrictFloat, StrictInt],
        existing_consumption_gallons_per_year: Optional[Union[StrictFloat, StrictInt]] = None,
        existing_consumption_cubic_feet_per_year: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HvacUpdateResults:
        """Ggrf Hvac Upgrade Fossil To Electric

        Calculate emissions savings for an HVAC update from fossil fuel to electric.  Replicate the calculation on the 'B1. HVAC update' tab of the 'Priority_Project_2_Net-Zero Building GGRF Calculator 10.18.24.xlsx' spreadsheet.  The methodology taken from the spreadsheet is as follows: We start with the current fuel, efficiency, and annual usage of the current fuel. We then compute how many BTUs this corresponds to. We then go back in the other direction, assuming the same number of BTUs are used, then figure out based on the new equipment efficiency how many kWh of power is used. Now, using regionally adjusted lookup tables, we determine the amount of CO2e for the new system and the old, and take the difference.  Parameters ---------- location_zip_code     The zip code where the upgrade is taking place. This is used to determine     how power is supplied and the emissions it generates. existing_unit_efficiency_standard     The industry standard the machine being replaced is measured against. This     is used to determine the type of fuel the existing unit uses. new_unit_efficiency_percent     The percent efficiency of the new electric HVAC unit. Value should be between     0 and 100 (not 0.0 and 1.0). existing_efficiency_btu_per_watt_hour     The efficiency of the existing unit that is being replaced. existing_consumption_gallons_per_year     How much fuel the existing unit uses in gallons per year if it uses a fuel     that is measured in gallons (i.e. all fossil fuels except natural gas).     Either this value, or `existing_consumption_cubic_feet_per_year`, but not     both, should be specified. existing_consumption_cubic_feet_per_year     How much fuel the existing unit uses in cubic feet per year if it uses a fuel     that is measured in cubic feet (currently only natural gas).     Either this value, or `existing_consumption_gallons_per_year`, but not     both, should be specified.  Returns -------     The old and new annual emissions of CO2e and their difference.  Raises ------ ValueError     If an unacceptable combination of arguments are passed, for example,     `existing_unit_efficiency_standard=HvacEfficiencyFossilFuels.AFUE_GAS_FURNACE`     and `existing_consumption_gallons_per_year` is passed instead of     `existing_consumption_cubic_feet_per_year`.

        :param location_zip_code: (required)
        :type location_zip_code: str
        :param existing_unit_efficiency_standard: (required)
        :type existing_unit_efficiency_standard: HvacEfficiencyFossilFuels
        :param new_unit_efficiency_percent: (required)
        :type new_unit_efficiency_percent: float
        :param existing_efficiency_btu_per_watt_hour: (required)
        :type existing_efficiency_btu_per_watt_hour: float
        :param existing_consumption_gallons_per_year:
        :type existing_consumption_gallons_per_year: float
        :param existing_consumption_cubic_feet_per_year:
        :type existing_consumption_cubic_feet_per_year: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get_serialize(
            location_zip_code=location_zip_code,
            existing_unit_efficiency_standard=existing_unit_efficiency_standard,
            new_unit_efficiency_percent=new_unit_efficiency_percent,
            existing_efficiency_btu_per_watt_hour=existing_efficiency_btu_per_watt_hour,
            existing_consumption_gallons_per_year=existing_consumption_gallons_per_year,
            existing_consumption_cubic_feet_per_year=existing_consumption_cubic_feet_per_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HvacUpdateResults",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get_with_http_info(
        self,
        location_zip_code: StrictStr,
        existing_unit_efficiency_standard: HvacEfficiencyFossilFuels,
        new_unit_efficiency_percent: Union[StrictFloat, StrictInt],
        existing_efficiency_btu_per_watt_hour: Union[StrictFloat, StrictInt],
        existing_consumption_gallons_per_year: Optional[Union[StrictFloat, StrictInt]] = None,
        existing_consumption_cubic_feet_per_year: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HvacUpdateResults]:
        """Ggrf Hvac Upgrade Fossil To Electric

        Calculate emissions savings for an HVAC update from fossil fuel to electric.  Replicate the calculation on the 'B1. HVAC update' tab of the 'Priority_Project_2_Net-Zero Building GGRF Calculator 10.18.24.xlsx' spreadsheet.  The methodology taken from the spreadsheet is as follows: We start with the current fuel, efficiency, and annual usage of the current fuel. We then compute how many BTUs this corresponds to. We then go back in the other direction, assuming the same number of BTUs are used, then figure out based on the new equipment efficiency how many kWh of power is used. Now, using regionally adjusted lookup tables, we determine the amount of CO2e for the new system and the old, and take the difference.  Parameters ---------- location_zip_code     The zip code where the upgrade is taking place. This is used to determine     how power is supplied and the emissions it generates. existing_unit_efficiency_standard     The industry standard the machine being replaced is measured against. This     is used to determine the type of fuel the existing unit uses. new_unit_efficiency_percent     The percent efficiency of the new electric HVAC unit. Value should be between     0 and 100 (not 0.0 and 1.0). existing_efficiency_btu_per_watt_hour     The efficiency of the existing unit that is being replaced. existing_consumption_gallons_per_year     How much fuel the existing unit uses in gallons per year if it uses a fuel     that is measured in gallons (i.e. all fossil fuels except natural gas).     Either this value, or `existing_consumption_cubic_feet_per_year`, but not     both, should be specified. existing_consumption_cubic_feet_per_year     How much fuel the existing unit uses in cubic feet per year if it uses a fuel     that is measured in cubic feet (currently only natural gas).     Either this value, or `existing_consumption_gallons_per_year`, but not     both, should be specified.  Returns -------     The old and new annual emissions of CO2e and their difference.  Raises ------ ValueError     If an unacceptable combination of arguments are passed, for example,     `existing_unit_efficiency_standard=HvacEfficiencyFossilFuels.AFUE_GAS_FURNACE`     and `existing_consumption_gallons_per_year` is passed instead of     `existing_consumption_cubic_feet_per_year`.

        :param location_zip_code: (required)
        :type location_zip_code: str
        :param existing_unit_efficiency_standard: (required)
        :type existing_unit_efficiency_standard: HvacEfficiencyFossilFuels
        :param new_unit_efficiency_percent: (required)
        :type new_unit_efficiency_percent: float
        :param existing_efficiency_btu_per_watt_hour: (required)
        :type existing_efficiency_btu_per_watt_hour: float
        :param existing_consumption_gallons_per_year:
        :type existing_consumption_gallons_per_year: float
        :param existing_consumption_cubic_feet_per_year:
        :type existing_consumption_cubic_feet_per_year: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get_serialize(
            location_zip_code=location_zip_code,
            existing_unit_efficiency_standard=existing_unit_efficiency_standard,
            new_unit_efficiency_percent=new_unit_efficiency_percent,
            existing_efficiency_btu_per_watt_hour=existing_efficiency_btu_per_watt_hour,
            existing_consumption_gallons_per_year=existing_consumption_gallons_per_year,
            existing_consumption_cubic_feet_per_year=existing_consumption_cubic_feet_per_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HvacUpdateResults",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get_without_preload_content(
        self,
        location_zip_code: StrictStr,
        existing_unit_efficiency_standard: HvacEfficiencyFossilFuels,
        new_unit_efficiency_percent: Union[StrictFloat, StrictInt],
        existing_efficiency_btu_per_watt_hour: Union[StrictFloat, StrictInt],
        existing_consumption_gallons_per_year: Optional[Union[StrictFloat, StrictInt]] = None,
        existing_consumption_cubic_feet_per_year: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ggrf Hvac Upgrade Fossil To Electric

        Calculate emissions savings for an HVAC update from fossil fuel to electric.  Replicate the calculation on the 'B1. HVAC update' tab of the 'Priority_Project_2_Net-Zero Building GGRF Calculator 10.18.24.xlsx' spreadsheet.  The methodology taken from the spreadsheet is as follows: We start with the current fuel, efficiency, and annual usage of the current fuel. We then compute how many BTUs this corresponds to. We then go back in the other direction, assuming the same number of BTUs are used, then figure out based on the new equipment efficiency how many kWh of power is used. Now, using regionally adjusted lookup tables, we determine the amount of CO2e for the new system and the old, and take the difference.  Parameters ---------- location_zip_code     The zip code where the upgrade is taking place. This is used to determine     how power is supplied and the emissions it generates. existing_unit_efficiency_standard     The industry standard the machine being replaced is measured against. This     is used to determine the type of fuel the existing unit uses. new_unit_efficiency_percent     The percent efficiency of the new electric HVAC unit. Value should be between     0 and 100 (not 0.0 and 1.0). existing_efficiency_btu_per_watt_hour     The efficiency of the existing unit that is being replaced. existing_consumption_gallons_per_year     How much fuel the existing unit uses in gallons per year if it uses a fuel     that is measured in gallons (i.e. all fossil fuels except natural gas).     Either this value, or `existing_consumption_cubic_feet_per_year`, but not     both, should be specified. existing_consumption_cubic_feet_per_year     How much fuel the existing unit uses in cubic feet per year if it uses a fuel     that is measured in cubic feet (currently only natural gas).     Either this value, or `existing_consumption_gallons_per_year`, but not     both, should be specified.  Returns -------     The old and new annual emissions of CO2e and their difference.  Raises ------ ValueError     If an unacceptable combination of arguments are passed, for example,     `existing_unit_efficiency_standard=HvacEfficiencyFossilFuels.AFUE_GAS_FURNACE`     and `existing_consumption_gallons_per_year` is passed instead of     `existing_consumption_cubic_feet_per_year`.

        :param location_zip_code: (required)
        :type location_zip_code: str
        :param existing_unit_efficiency_standard: (required)
        :type existing_unit_efficiency_standard: HvacEfficiencyFossilFuels
        :param new_unit_efficiency_percent: (required)
        :type new_unit_efficiency_percent: float
        :param existing_efficiency_btu_per_watt_hour: (required)
        :type existing_efficiency_btu_per_watt_hour: float
        :param existing_consumption_gallons_per_year:
        :type existing_consumption_gallons_per_year: float
        :param existing_consumption_cubic_feet_per_year:
        :type existing_consumption_cubic_feet_per_year: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get_serialize(
            location_zip_code=location_zip_code,
            existing_unit_efficiency_standard=existing_unit_efficiency_standard,
            new_unit_efficiency_percent=new_unit_efficiency_percent,
            existing_efficiency_btu_per_watt_hour=existing_efficiency_btu_per_watt_hour,
            existing_consumption_gallons_per_year=existing_consumption_gallons_per_year,
            existing_consumption_cubic_feet_per_year=existing_consumption_cubic_feet_per_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HvacUpdateResults",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ggrf_hvac_upgrade_fossil_to_electric_ggrf_hvac_upgrade_fossil_to_electric_v1_get_serialize(
        self,
        location_zip_code,
        existing_unit_efficiency_standard,
        new_unit_efficiency_percent,
        existing_efficiency_btu_per_watt_hour,
        existing_consumption_gallons_per_year,
        existing_consumption_cubic_feet_per_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_zip_code is not None:
            
            _query_params.append(('location_zip_code', location_zip_code))
            
        if existing_unit_efficiency_standard is not None:
            
            _query_params.append(('existing_unit_efficiency_standard', existing_unit_efficiency_standard.value))
            
        if new_unit_efficiency_percent is not None:
            
            _query_params.append(('new_unit_efficiency_percent', new_unit_efficiency_percent))
            
        if existing_efficiency_btu_per_watt_hour is not None:
            
            _query_params.append(('existing_efficiency_btu_per_watt_hour', existing_efficiency_btu_per_watt_hour))
            
        if existing_consumption_gallons_per_year is not None:
            
            _query_params.append(('existing_consumption_gallons_per_year', existing_consumption_gallons_per_year))
            
        if existing_consumption_cubic_feet_per_year is not None:
            
            _query_params.append(('existing_consumption_cubic_feet_per_year', existing_consumption_cubic_feet_per_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ggrf/hvac_upgrade/fossil-to-electric/v1/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


